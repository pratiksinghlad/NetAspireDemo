name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/weatherapi
  IMAGE_NAME_WEB: ${{ github.repository }}/weatherweb

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build and Test

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Web
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/WeatherApi/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}

    - name: Build and push Web Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/WeatherWeb/Dockerfile
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}

  # Uncomment and configure this job for Azure deployment
  # deploy-to-azure:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   
  #   steps:
  #   - name: Deploy to Azure Web App
  #     uses: azure/webapps-deploy@v2
  #     with:
  #       app-name: 'your-azure-webapp-name'
  #       publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
  #       images: |
  #         ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest
  #         ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:latest

  # Alternative: Deploy using Azure CLI (requires service principal)
  # deploy-with-cli:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
  #   
  #   - name: Deploy to Azure Container Instances
  #     run: |
  #       az container create \
  #         --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
  #         --name weather-demo-api \
  #         --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest \
  #         --dns-name-label weather-demo-api-${{ github.run_number }} \
  #         --ports 80
  #       
  #       az container create \
  #         --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
  #         --name weather-demo-web \
  #         --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:latest \
  #         --dns-name-label weather-demo-web-${{ github.run_number }} \
  #         --ports 80 \
  #         --environment-variables WEATHER_API_BASE_URL=http://weather-demo-api-${{ github.run_number }}.region.azurecontainer.io